--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_5b226942-0759-43b7-995a-4d221508ba08 ---
METADATA_JSON:
{
    "original_filepath": "code\\edge_case.html",
    "original_filename": "edge_case.html",
    "timestamp_utc_iso": "2025-05-16T21:14:53.940476Z",
    "type": ".html",
    "size_bytes": 2179,
    "checksum_sha256": "5f7b270cb23b338153fd9278246a3998692f48ad159c2ffc73768af6fc45e300"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_5b226942-0759-43b7-995a-4d221508ba08 ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_5b226942-0759-43b7-995a-4d221508ba08 ---<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edge Case Test</title>
    <!-- Comment with special characters: < > & " ' -->
    <script>
        // JavaScript with regex patterns
        const pattern = /^[a-zA-Z0-9!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]*$/;
        const str = "Test <!-- not a comment --> string";
        
        /* Multi-line comment
         * with <!-- HTML comment syntax -->
         * and other special characters: \ / ` ~
         */
        function testFunction() {
            return `Template literal with ${variable} and nested "quotes" inside`;
        }
    </script>
    <style>
        /* CSS with complex selectors */
        body::before {
            content: "<!-- This is not an HTML comment -->";
            color: #123456;
        }
        
        [data-special*="test"] > .nested::after {
            content: "/* This is not a CSS comment */";
        }
    </style>
</head>
<body>
    <!-- HTML comment that might confuse parsers -->
    <div class="container">
        <h1>Edge Case Test File</h1>
        <p>This file contains various edge cases that might confuse parsers:</p>
        <ul>
            <li>HTML comments &lt;!-- like this --&gt;</li>
            <li>Script tags with JavaScript</li>
            <li>CSS with complex selectors</li>
            <li>Special characters: &amp; &lt; &gt; &quot; &#39;</li>
            <li>Code blocks that look like separators</li>
        </ul>
        <pre>
# ===============================================================================
# FILE: fake/separator.txt
# ===============================================================================
# METADATA: {"modified": "2023-01-01", "type": ".txt"}
# -------------------------------------------------------------------------------

This is not a real separator, just testing how the parser handles it.

# ===============================================================================
# END FILE
# ===============================================================================
        </pre>
    </div>
</body>
</html>
--- PYMK1F_END_FILE_CONTENT_BLOCK_5b226942-0759-43b7-995a-4d221508ba08 ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_db8ec760-0065-4629-b40a-4b60a57e1c80 ---
METADATA_JSON:
{
    "original_filepath": "code\\index.php",
    "original_filename": "index.php",
    "timestamp_utc_iso": "2025-05-16T21:10:30.207526Z",
    "type": ".php",
    "size_bytes": 380,
    "checksum_sha256": "28aa0c5646ccdb20e32033f46035d6337ba29a083c766e2ef96fc533bb425672"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_db8ec760-0065-4629-b40a-4b60a57e1c80 ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_db8ec760-0065-4629-b40a-4b60a57e1c80 ---<?php
/**
 * Test PHP file for makeonefile.py testing
 */

// Simple example PHP function
function format_greeting($name = 'Guest') {
    return "Welcome, " . htmlspecialchars($name) . "!";
}

// Example usage
$user = "Test User";
echo format_greeting($user);

// Configuration array
$config = [
    'site_name' => 'Test Site',
    'debug' => true,
    'version' => '1.0.0'
];
?>
--- PYMK1F_END_FILE_CONTENT_BLOCK_db8ec760-0065-4629-b40a-4b60a57e1c80 ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_19667c3c-0cf7-44f5-bfd1-2b5ec7d674d8 ---
METADATA_JSON:
{
    "original_filepath": "code\\javascript\\app.js",
    "original_filename": "app.js",
    "timestamp_utc_iso": "2025-05-16T21:09:29.367279Z",
    "type": ".js",
    "size_bytes": 174,
    "checksum_sha256": "4243e0097ad783c6c29f5359c26dd3cc958495255a1602746ac5052cef79aa16"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_19667c3c-0cf7-44f5-bfd1-2b5ec7d674d8 ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_19667c3c-0cf7-44f5-bfd1-2b5ec7d674d8 ---/**
 * A simple JavaScript demonstration
 */

function greet(name = 'User') {
  return `Hello, ${name}!`;
}

// Export for use in other modules
module.exports = {
  greet
};
--- PYMK1F_END_FILE_CONTENT_BLOCK_19667c3c-0cf7-44f5-bfd1-2b5ec7d674d8 ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_5ebfdabf-edd9-493e-8be7-e77c946d68b7 ---
METADATA_JSON:
{
    "original_filepath": "code\\javascript\\styles.css",
    "original_filename": "styles.css",
    "timestamp_utc_iso": "2025-05-16T21:09:40.870502Z",
    "type": ".css",
    "size_bytes": 307,
    "checksum_sha256": "cb41e87184e8c4b10818517ba8e20cb36e774c09f9e1c28933bfaa914fbf01a4"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_5ebfdabf-edd9-493e-8be7-e77c946d68b7 ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_5ebfdabf-edd9-493e-8be7-e77c946d68b7 ---/* 
 * Basic CSS styles for testing
 */

body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 20px;
  background-color: #f5f5f5;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  background-color: #fff;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}
--- PYMK1F_END_FILE_CONTENT_BLOCK_5ebfdabf-edd9-493e-8be7-e77c946d68b7 ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_553f3503-f6af-463d-b87f-4b1250edc332 ---
METADATA_JSON:
{
    "original_filepath": "code\\large_sample.txt",
    "original_filename": "large_sample.txt",
    "timestamp_utc_iso": "2025-05-16T21:52:14.634868Z",
    "type": ".txt",
    "size_bytes": 5489,
    "checksum_sha256": "f6142e98a92c3af47e5d1c2dbef94a847c093a11c33531bf5e2aa68de2126da2"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_553f3503-f6af-463d-b87f-4b1250edc332 ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_553f3503-f6af-463d-b87f-4b1250edc332 ---# Large Sample Text File
# This file is used to test how makeonefile handles larger files

"""
This is a large sample text file with repeated content to test performance.
"""

import os
import sys
import time
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
# Generate a large amount of text content
content = []
for i in range(500):
    content.append(f"Line {i}: This is a sample line of text for performance testing.")
    content.append(f"Number sequence: {i*10} {i*10+1} {i*10+2} {i*10+3} {i*10+4} {i*10+5}")
    content.append(f"The quick brown fox jumps over the lazy dog {i} times.")
    content.append("=" * 80)
    content.append("")

# Simulate a large code block
content.append("def generate_large_function():")
content.append('    """')
content.append("    This is a large function with multiple nested loops and conditions")
content.append('    """')
content.append("    result = []")
for i in range(20):
    content.append(f"    # Section {i}")
    content.append(f"    for j in range({i}, {i+10}):")
    content.append(f"        if j % 2 == 0:")
    content.append(f"            result.append(f\"Even: {{{j}}}\")")
    content.append(f"        else:")
    content.append(f"            result.append(f\"Odd: {{{j}}}\")")
    content.append(f"        # Nested condition")
    content.append(f"        if j % 3 == 0:")
    content.append(f"            for k in range(5):")
    content.append(f"                result.append(f\"Multiple of 3: {{{j}}} with k={{{k}}}\")")
    content.append("")
content.append("    return result")
content.append("")

# Add some large JSON-like data
content.append("{")
for i in range(100):
    content.append(f'    "key{i}": {{')
    content.append(f'        "id": {i},')
    content.append(f'        "name": "Item {i}",')
    content.append(f'        "description": "This is a description for item {i} with some additional text to make it longer",')
    content.append(f'        "metadata": {{')
    content.append(f'            "created": "2023-01-{i % 30 + 1:02d}",')
    content.append(f'            "modified": "2023-02-{i % 28 + 1:02d}",')
    content.append(f'            "status": {"active" if i % 3 == 0 else "inactive" if i % 3 == 1 else "pending"}')
    content.append(f'        }}')
    comma = "," if i < 99 else ""
    content.append(f'    }}{comma}')
content.append("}")

# Add some long lines
content.append("# " + "=" * 200)
content.append("# Very long line below")
content.append("x" * 1000)
content.append("# " + "=" * 200)

# Complete the file
content = "\n".join(content)
--- PYMK1F_END_FILE_CONTENT_BLOCK_553f3503-f6af-463d-b87f-4b1250edc332 ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_a74c1ef0-1f1e-427b-8a89-867112cb176c ---
METADATA_JSON:
{
    "original_filepath": "code\\python\\hello.py",
    "original_filename": "hello.py",
    "timestamp_utc_iso": "2025-05-16T21:20:02.798072Z",
    "type": ".py",
    "size_bytes": 206,
    "checksum_sha256": "cc676efbdb8fb4dabea26325e1a02f9124bb346c528bbc2b143e20f78f8cd445"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_a74c1ef0-1f1e-427b-8a89-867112cb176c ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_a74c1ef0-1f1e-427b-8a89-867112cb176c ---#!/usr/bin/env python3
"""
A simple hello world script
"""


def say_hello(name="World"):
    """Print a greeting message"""
    return f"Hello, {name}!"


if __name__ == "__main__":
    print(say_hello())
--- PYMK1F_END_FILE_CONTENT_BLOCK_a74c1ef0-1f1e-427b-8a89-867112cb176c ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_a7d44c8d-4d21-449c-9a0b-1bda88d49611 ---
METADATA_JSON:
{
    "original_filepath": "code\\python\\utils.py",
    "original_filename": "utils.py",
    "timestamp_utc_iso": "2025-05-16T21:20:02.819552Z",
    "type": ".py",
    "size_bytes": 367,
    "checksum_sha256": "2f5d2d69fed6a564861be74e07065444aacb824e4277eb9dd64f7f673f57ec86"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_a7d44c8d-4d21-449c-9a0b-1bda88d49611 ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_a7d44c8d-4d21-449c-9a0b-1bda88d49611 ---"""
Utility functions for demonstration
"""


def add(a, b):
    """Add two numbers"""
    return a + b


def subtract(a, b):
    """Subtract b from a"""
    return a - b


def multiply(a, b):
    """Multiply two numbers"""
    return a * b


def divide(a, b):
    """Divide a by b"""
    if b == 0:
        raise ValueError("Cannot divide by zero")
    return a / b
--- PYMK1F_END_FILE_CONTENT_BLOCK_a7d44c8d-4d21-449c-9a0b-1bda88d49611 ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_915a612a-7294-4c80-82cf-e411fd0457d9 ---
METADATA_JSON:
{
    "original_filepath": "config\\config.json",
    "original_filename": "config.json",
    "timestamp_utc_iso": "2025-05-16T21:09:50.721548Z",
    "type": ".json",
    "size_bytes": 206,
    "checksum_sha256": "090aa7676e7d101b783c583d7ed5097599037366ffade746fec26dac449f0fc7"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_915a612a-7294-4c80-82cf-e411fd0457d9 ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_915a612a-7294-4c80-82cf-e411fd0457d9 ---{
  "name": "TestApp",
  "version": "1.0.0",
  "description": "Test configuration for makeonefile",
  "settings": {
    "debug": true,
    "logLevel": "info",
    "maxRetries": 3,
    "timeout": 5000
  }
}
--- PYMK1F_END_FILE_CONTENT_BLOCK_915a612a-7294-4c80-82cf-e411fd0457d9 ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_0e5c16fc-3fdb-4dfe-926c-e9002e64e445 ---
METADATA_JSON:
{
    "original_filepath": "docs\\README.md",
    "original_filename": "README.md",
    "timestamp_utc_iso": "2025-05-16T22:54:06.239505Z",
    "type": ".md",
    "size_bytes": 424,
    "checksum_sha256": "b43d1e399c15a25c3cea58f44ba63eb5037c271f389b3855e5f9b3d2fabf2bef"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_0e5c16fc-3fdb-4dfe-926c-e9002e64e445 ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_0e5c16fc-3fdb-4dfe-926c-e9002e64e445 ---# Test Documentation

This is a test markdown file for the makefileonefile.py test suite.

## Purpose

To demonstrate how the script handles Markdown files with:

- Lists
- Headers
- Code blocks

```python
def example():
    """Just an example function in a code block"""
    return "This is just for testing"
```

## Notes

The script should correctly include this file in the combined output unless
specifically excluded.
--- PYMK1F_END_FILE_CONTENT_BLOCK_0e5c16fc-3fdb-4dfe-926c-e9002e64e445 ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_36f2be47-0e61-4e90-be3a-0b6c137f5048 ---
METADATA_JSON:
{
    "original_filepath": "docs\\unicode_sample.md",
    "original_filename": "unicode_sample.md",
    "timestamp_utc_iso": "2025-05-16T22:54:06.251212Z",
    "type": ".md",
    "size_bytes": 1400,
    "checksum_sha256": "76449dbd3ee05bf1be78987a02cb5a16be0a58ce20e30d662597b5d73beab1f8"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_36f2be47-0e61-4e90-be3a-0b6c137f5048 ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_36f2be47-0e61-4e90-be3a-0b6c137f5048 ---# Unicode Character Testing File

This file contains various Unicode characters to test encoding handling:

## International Characters

- German: Grüße aus München! Der Fluß ist schön.
- French: Voilà! Ça va très bien, merci.
- Spanish: ¿Cómo estás? Mañana será un día mejor.
- Russian: Привет, как дела? Хорошо!
- Chinese: 你好，世界！
- Japanese: こんにちは世界！
- Arabic: مرحبا بالعالم!
- Greek: Γεια σου Κόσμε!
- Emojis: 😀 🚀 🌍 🎉 🔥 👨‍💻

## Special Unicode Symbols

- Mathematical: ∑ ∫ ∏ √ ∞ ∆ ∇ ∂ ∀ ∃ ∈ ∉ ∋ ∌
- Currency: € £ ¥ ¢ $ ₹ ₽
- Arrows: → ← ↑ ↓ ↔ ↕ ⇒ ⇐ ⇔
- Miscellaneous: © ® ™ ° § ¶ † ‡ • ⌘ ⌥
- Technical: ⌚ ⌨ ✉ ☎ ⏰

## Test cases for file system path handling

- Windows paths: C:\Users\User\Documents\Résumé.pdf
- Unix paths: /home/user/documents/résumé.pdf
- URLs: https://example.com/üñïçødé/test?q=値&lang=日本語

## Test cases for escaping

- Backslashes: \\ \n \t \r \u1234
- HTML entities: &lt; &gt; &amp; &quot; &apos;
- JavaScript escaped: \u{1F600} \u0041 \x41

## Test cases with BOM and other special characters

Zero-width spaces and non-breaking spaces below:

- [​] (zero-width space between brackets)
- [ ] (non-breaking space between brackets)
- Control characters test: test
--- PYMK1F_END_FILE_CONTENT_BLOCK_36f2be47-0e61-4e90-be3a-0b6c137f5048 ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_47d59d4e-6ec3-4607-be9e-16560d898caa ---
METADATA_JSON:
{
    "original_filepath": "f1.txt",
    "original_filename": "f1.txt",
    "timestamp_utc_iso": "2025-05-18T12:10:32.144160Z",
    "type": ".txt",
    "size_bytes": 5,
    "checksum_sha256": "c147efcfc2d7ea666a9e4f5187b115c90903f0fc896a56df9a6ef5d8f3fc9f31"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_47d59d4e-6ec3-4607-be9e-16560d898caa ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_47d59d4e-6ec3-4607-be9e-16560d898caa ---file1--- PYMK1F_END_FILE_CONTENT_BLOCK_47d59d4e-6ec3-4607-be9e-16560d898caa ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_59d5b501-b13c-4a85-baa2-c81cd1d69653 ---
METADATA_JSON:
{
    "original_filepath": "f2.txt",
    "original_filename": "f2.txt",
    "timestamp_utc_iso": "2025-05-18T12:10:32.144160Z",
    "type": ".txt",
    "size_bytes": 5,
    "checksum_sha256": "3377870dfeaaa7adf79a374d2702a3fdb13e5e5ea0dd8aa95a802ad39044a92f"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_59d5b501-b13c-4a85-baa2-c81cd1d69653 ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_59d5b501-b13c-4a85-baa2-c81cd1d69653 ---file2--- PYMK1F_END_FILE_CONTENT_BLOCK_59d5b501-b13c-4a85-baa2-c81cd1d69653 ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_b19efa82-7ab1-45a9-b44e-47273adb8fa4 ---
METADATA_JSON:
{
    "original_filepath": "f_ts1.txt",
    "original_filename": "f_ts1.txt",
    "timestamp_utc_iso": "2025-05-18T12:10:33.950713Z",
    "type": ".txt",
    "size_bytes": 8,
    "checksum_sha256": "492d05598d6ee523a81e4894aec36be85bc660982a0a85d4231f382e780f3def"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_b19efa82-7ab1-45a9-b44e-47273adb8fa4 ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_b19efa82-7ab1-45a9-b44e-47273adb8fa4 ---file ts1--- PYMK1F_END_FILE_CONTENT_BLOCK_b19efa82-7ab1-45a9-b44e-47273adb8fa4 ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_03842638-98c0-49ad-8887-7c20d47edd3d ---
METADATA_JSON:
{
    "original_filepath": "file_extensions_test\\test.json",
    "original_filename": "test.json",
    "timestamp_utc_iso": "2025-05-16T23:05:48.495317Z",
    "type": ".json",
    "size_bytes": 123,
    "checksum_sha256": "909829985fd6ee550dbc6131c7af19fe07abebccb8c61ab186eda9aac7ff0ab4"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_03842638-98c0-49ad-8887-7c20d47edd3d ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_03842638-98c0-49ad-8887-7c20d47edd3d ---{
  "name": "test",
  "description": "A sample JSON file for testing file extension filtering",
  "version": "1.0.0"
} --- PYMK1F_END_FILE_CONTENT_BLOCK_03842638-98c0-49ad-8887-7c20d47edd3d ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_aac6269a-d38a-4613-bfa0-1bc4b8a29a35 ---
METADATA_JSON:
{
    "original_filepath": "file_extensions_test\\test.log",
    "original_filename": "test.log",
    "timestamp_utc_iso": "2025-05-16T23:06:04.494479Z",
    "type": ".log",
    "size_bytes": 257,
    "checksum_sha256": "3d9029003b6a73f944f332f6a8acee48588d5fefd3106cbc99e4bdcf7fced4dd"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_aac6269a-d38a-4613-bfa0-1bc4b8a29a35 ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_aac6269a-d38a-4613-bfa0-1bc4b8a29a35 ---2023-06-15 12:34:56 INFO This is a sample log file for testing file extension filtering exclusion
2023-06-15 12:34:57 DEBUG Should be excluded when using --exclude-extensions .log
2023-06-15 12:34:58 ERROR Log files are typically excluded from processing --- PYMK1F_END_FILE_CONTENT_BLOCK_aac6269a-d38a-4613-bfa0-1bc4b8a29a35 ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_d2cc0523-cbad-4ef8-84d5-7e3dfbcdc36b ---
METADATA_JSON:
{
    "original_filepath": "file_extensions_test\\test.md",
    "original_filename": "test.md",
    "timestamp_utc_iso": "2025-05-17T00:03:40.920635Z",
    "type": ".md",
    "size_bytes": 176,
    "checksum_sha256": "7c1282cb2f0005972e9c3448466f27653d00a620c1eb146bb8cd3d2aeee1b27e"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_d2cc0523-cbad-4ef8-84d5-7e3dfbcdc36b ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_d2cc0523-cbad-4ef8-84d5-7e3dfbcdc36b ---# Sample Markdown File

This is a sample markdown file for testing file extension filtering.

## Section 1

Testing, testing, 1, 2, 3...

## Section 2

More test content here!
--- PYMK1F_END_FILE_CONTENT_BLOCK_d2cc0523-cbad-4ef8-84d5-7e3dfbcdc36b ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_738d5e1a-9e7b-49f0-9f4a-9d7caab63dde ---
METADATA_JSON:
{
    "original_filepath": "file_extensions_test\\test.py",
    "original_filename": "test.py",
    "timestamp_utc_iso": "2025-05-16T23:06:09.064635Z",
    "type": ".py",
    "size_bytes": 255,
    "checksum_sha256": "c8169d3bd4b9bdb7ab345f9a848cb05d4846d9e5e4d70e1569437ee6c4d3f735"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_738d5e1a-9e7b-49f0-9f4a-9d7caab63dde ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_738d5e1a-9e7b-49f0-9f4a-9d7caab63dde ---#!/usr/bin/env python3
"""
A sample Python file for testing file extension filtering
"""

def main():
    """Main function."""
    print("This is a sample Python file for testing file extension filtering")

if __name__ == "__main__":
    main() --- PYMK1F_END_FILE_CONTENT_BLOCK_738d5e1a-9e7b-49f0-9f4a-9d7caab63dde ---

--- PYMK1F_BEGIN_FILE_METADATA_BLOCK_c98b4cf6-7b63-4ae9-8c6e-4619366d750d ---
METADATA_JSON:
{
    "original_filepath": "file_extensions_test\\test.txt",
    "original_filename": "test.txt",
    "timestamp_utc_iso": "2025-05-16T23:05:42.866407Z",
    "type": ".txt",
    "size_bytes": 65,
    "checksum_sha256": "34b36a9d3028150ebae089e6cad4913022da5311571e71986dfc76cc76162804"
}
--- PYMK1F_END_FILE_METADATA_BLOCK_c98b4cf6-7b63-4ae9-8c6e-4619366d750d ---
--- PYMK1F_BEGIN_FILE_CONTENT_BLOCK_c98b4cf6-7b63-4ae9-8c6e-4619366d750d ---This is a sample text file for testing file extension filtering. --- PYMK1F_END_FILE_CONTENT_BLOCK_c98b4cf6-7b63-4ae9-8c6e-4619366d750d ---
