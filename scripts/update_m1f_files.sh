#!/bin/bash

# Update m1f files for the m1f project
# This script regenerates all m1f bundle files in the .m1f directory

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get the script directory and project root
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"

echo -e "${GREEN}Updating m1f bundle files...${NC}"

# Change to project root
cd "$PROJECT_ROOT"

# Activate virtual environment
source .venv/bin/activate

# Create .m1f directory if it doesn't exist
mkdir -p .m1f

# Generate documentation bundle
echo -e "${YELLOW}Generating documentation bundle...${NC}"
python tools/m1f.py -s docs -o .m1f/m1f-documentation.txt \
    --include-extensions .md .txt \
    --separator-style Markdown \
    -f

# Generate programs bundle
echo -e "${YELLOW}Generating programs bundle...${NC}"
python tools/m1f.py -s tools -o .m1f/m1f-programs.txt \
    --include-extensions .py \
    --separator-style Detailed \
    -f

# Generate tests bundle (excluding test data)
echo -e "${YELLOW}Generating tests bundle...${NC}"
python tools/m1f.py -s tests -o .m1f/m1f-tests.txt \
    --include-extensions .py \
    --excludes "*/source/*" "*/extracted/*" "*/output/*" "*/test_pages/*" "*/static/*" \
    --separator-style Detailed \
    -f

# Generate all-in-one bundle (excluding test data and large files)
echo -e "${YELLOW}Generating all-in-one bundle...${NC}"
python tools/m1f.py -s . -o .m1f/m1f-allinone.txt \
    --include-extensions .py .md .txt .yml .yaml .json \
    --excludes "*/node_modules/*" "*/tests/*/source/*" "*/tests/*/extracted/*" \
               "*/tests/*/output/*" "*/test_pages/*" "*/static/*" \
               "*/.venv/*" "*/.git/*" "*/.m1f/*" "*/dist/*" "*/build/*" \
    --separator-style Detailed \
    -f

# Create a README in .m1f
cat > .m1f/README.md << 'EOF'
# m1f Bundle Files

This directory contains pre-generated m1f bundles of the m1f project itself.
These files are automatically generated by `scripts/update_m1f_files.sh`.

## Available Bundles

- `m1f-documentation.txt` - All documentation files
- `m1f-programs.txt` - All Python source code
- `m1f-tests.txt` - All test files (excluding test data)
- `m1f-allinone.txt` - Complete project bundle (excluding test data)

## Usage in Other Projects

To use these bundles in your project:

1. Create a `.m1f` directory in your project
2. Create a symlink to this directory:
   ```bash
   ln -s /path/to/m1f/.m1f /path/to/your/project/.m1f/m1f
   ```

3. Access the bundles:
   ```bash
   cat .m1f/m1f/m1f-documentation.txt
   ```

## Updating

Run `scripts/update_m1f_files.sh` whenever the m1f project changes significantly.
EOF

echo -e "${GREEN}âœ“ All m1f bundle files updated successfully!${NC}"
echo -e "Files created in: ${PROJECT_ROOT}/.m1f/"
ls -la .m1f/*.txt